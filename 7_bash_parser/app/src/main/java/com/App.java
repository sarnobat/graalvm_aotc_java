/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.stream.Stream;

import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.TreeVisitor;
import org.antlr.runtime.tree.TreeVisitorAction;
import org.gentoo.libbash.java_libbashLexer;
import org.gentoo.libbash.java_libbashParser;

public class App {

	public static void main(String[] args) throws ClassNotFoundException, FileNotFoundException, IOException,
			RecognitionException, InterruptedException {
		File file = Paths.get(getArg(args)).toFile();
		java_libbashParser theParser = new java_libbashParser(
				new CommonTokenStream(new java_libbashLexer(new ANTLRInputStream(new FileInputStream(file)))));
		Stream<String> s1 = Stream.of();
		ConcurrentLinkedQueue<String> q = new ConcurrentLinkedQueue<>();
		Thread t = new Thread() {

			@Override
			public void run() {
				try {
					extracted(theParser, s1, q);
				} catch (RecognitionException e) {
					e.printStackTrace();
				}
			}

		};
		t.start();
		t.join();
		while (!q.isEmpty()) {
			String symbol = q.remove();
			if (symbol.startsWith("-")) {
				continue;
			}
			System.out.println(symbol);
		}

	}

	//	Set<String> s = s1;

	private static String getArg(String[] args) {
		String script;
		if (args.length < 1) {
			script = "helloworld.sh";
		} else {
			script = args[0];
		}
		return script;
	}

	private static void extracted(java_libbashParser theParser, Stream<String> s1, ConcurrentLinkedQueue<String> q)
			throws RecognitionException {
		new TreeVisitor(theParser.getTreeAdaptor()).visit(theParser.start().getTree(), new TreeVisitorAction() {
			public Object pre(Object iObject) {
				return iObject;
			}

			public Object post(Object iObject) {

				if (iObject instanceof CommonTree) {
					CommonTree aTreeObject = (CommonTree) iObject;
					int aType = aTreeObject.getType();
					if (aType == java_libbashParser.STRING) {

						StringBuffer aStringBuffer = new StringBuffer();
						for (Object child : aTreeObject.getChildren()) {
							CommonTree aChildTree = (CommonTree) child;
							aStringBuffer.append(aChildTree.getText());
						}
						q.add(aStringBuffer.toString());
					} else if (aType == java_libbashParser.RBRACE) {

					} else if (aType == java_libbashParser.LSHIFT) {
					} else if (aType == java_libbashParser.NAME) {
					} else if (aType == java_libbashParser.COMMAND) {
					} else if (aType == java_libbashParser.LIST) {
						for (Object aChild : aTreeObject.getChildren()) {
							CommonTree aChildTree = (CommonTree) aChild;
							System.err.println(
									"App.main() LIST aChildTree.toStringTree() = " + aChildTree.toStringTree());
						}

					} else if (aType == java_libbashParser.CURRENT_SHELL) {
					} else if (aType == java_libbashParser.SLASH) {
					} else {
						System.err.println("App.main() UNKNOWN 4 treeObject.getLine() = " + aTreeObject.getLine());
						System.err.println("App.main() UNKNOWN 4 treeObject.getText() = " + aTreeObject.getText());
					}

				} else {
					System.err.println("App.main() " + iObject.getClass());
				}
				return iObject;
			}
		});
	};
}

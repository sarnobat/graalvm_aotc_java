/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Paths;

import org.antlr.runtime.ANTLRInputStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.TreeVisitor;
import org.antlr.runtime.tree.TreeVisitorAction;
import org.gentoo.libbash.java_libbashLexer;
import org.gentoo.libbash.java_libbashParser;

public class App {

	public static void main(String[] args)
			throws ClassNotFoundException, FileNotFoundException, IOException, RecognitionException {
		java_libbashParser theParser = new java_libbashParser(new CommonTokenStream(
				new java_libbashLexer(new ANTLRInputStream(new FileInputStream(Paths.get(getArg(args)).toFile())))));

		new TreeVisitor(theParser.getTreeAdaptor()).visit(theParser.start().getTree(), new TreeVisitorAction() {
			public Object pre(Object iObject) {
				return iObject;
			}

			public Object post(Object iObject) {

				if (iObject instanceof CommonTree) {
					CommonTree aTreeObject = (CommonTree) iObject;
					System.err.println("App.main() ALL 0 treeObject.getText() = " + aTreeObject.getText());
					int aType = aTreeObject.getType();
					if (aType == java_libbashParser.STRING) {

						StringBuffer aStringBuffer = new StringBuffer();
						for (Object child : aTreeObject.getChildren()) {
							CommonTree aChildTree = (CommonTree) child;
							System.err.println("App.main() STRING child = " + aChildTree.getText());
							aStringBuffer.append(aChildTree.getText());
						}
						System.err.println("STRING App.main() sb = " + aStringBuffer.toString());
						System.out.println(aStringBuffer.toString());
					} else if (aType == java_libbashParser.RBRACE) {

					} else if (aType == java_libbashParser.LSHIFT) {
					} else if (aType == java_libbashParser.NAME) {
					} else if (aType == java_libbashParser.COMMAND) {
					} else if (aType == java_libbashParser.LIST) {
						StringBuffer sb = new StringBuffer();
						for (Object aChild : aTreeObject.getChildren()) {
							CommonTree aChildTree = (CommonTree) aChild;

							System.err.println("App.main() LIST 1 child.getClass() = " + aChild.getClass());
							System.err.println("App.main() LIST 2 child = " + aChildTree.getText());
							sb.append(aChildTree.getText());
						}
						System.err.println("App.main() LIST sb = " + sb.toString());

					} else if (aType == java_libbashParser.CURRENT_SHELL) {
					} else if (aType == java_libbashParser.SLASH) {
					} else {
						System.err.println("App.main() 3 ty = " + aType);
						System.err.println("App.main() UNKNOWN 4 treeObject.getLine() = " + aTreeObject.getLine());
					}

				} else {
					System.err.println("App.main() " + iObject.getClass());
				}
				return iObject;
			}
		});

	}

	private static String getArg(String[] args) {
		String script;
		if (args.length < 1) {
			script = "helloworld.sh";
		} else {
			script = args[0];
		}
		return script;
	}
}

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.stream.Stream;

import org.antlr.runtime.RecognitionException;

/**
 */
public class App {

    public static void main(String[] args) throws ClassNotFoundException, FileNotFoundException, IOException,
            RecognitionException, InterruptedException {
        Set<String> visited = new HashSet<String>();
        Stream<String> s1 = Stream.of();
        ConcurrentLinkedQueue<String> q = new ConcurrentLinkedQueue<>();
        Thread t = new Thread() {

            @Override
            public void run() {
            }

        };
        t.start();
        t.join();
        // I don't think it's possible to use a stream instead of a queue.
        // Streams need to be closed before being consumed, apparently.
        while (!q.isEmpty()) {
            String symbol = q.remove();
            if (visited.contains(symbol)) {
                continue;
            }
            visited.add(symbol);

            if (symbol.startsWith("-")) {
                continue;
            } else if (symbol.startsWith("$")) {
                continue;
            }
            System.out.println(symbol);
        }

    }

}
